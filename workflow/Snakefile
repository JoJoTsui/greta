from snakemake.utils import min_version

min_version('7.29.0')

path = 'datasets/pbmc10k/cases/all/'
mthds = ['celloracle', 'figr', 'granie', 'pando']

def make_combs():
    from itertools import product
    s = path + 'runs/{0}.{1}.{2}.{3}.grn.csv'
    combinations = product(mthds, repeat=4)
    strings = []
    for combo in combinations:
        formatted_string = s.format(*combo)
        strings.append(formatted_string)
    #s = path + 'runs/{0}.src.csv'
    #for m in mthds:
    #    formatted_string = s.format(m)
    #    strings.append(formatted_string)
    s = path + 'runs/random.random.random.random.grn.csv'
    strings.append(s)
    return strings

configfile: 'config/config.yaml'
container: 'workflow/envs/gretabench.sif'

include: 'rules/datasets.smk'
include: 'rules/methods/celloracle.smk'
include: 'rules/methods/pando.smk'
include: 'rules/methods/granie.smk'
include: 'rules/methods/figr.smk'
include: 'rules/methods/hummus.smk'
include: 'rules/methods/scenicplus.smk'
include: 'rules/methods/grn.smk'
include: 'rules/methods/random.smk'

include: 'rules/analysis/prior.smk'
include: 'rules/analysis/pred.smk'
include: 'rules/analysis/mech.smk'

f_scores = [
'analysis/mech/prtrb/knocktf/pbmc10k.all.scores.csv',
'analysis/mech/tfact/knocktf/pbmc10k.all.scores.csv',
'analysis/pred/omics/gtf/pbmc10k.all.scores.csv',
'analysis/pred/omics/cretf/pbmc10k.all.scores.csv',
'analysis/pred/omics/gcre/pbmc10k.all.scores.csv',
'analysis/pred/pathway/kegg/pbmc10k.all.scores.csv',
'analysis/pred/pathway/hall/pbmc10k.all.scores.csv',
'analysis/pred/pathway/reac/pbmc10k.all.scores.csv',
'analysis/prior/tfm/hpa/pbmc10k.all.scores.csv',
'analysis/prior/tfm/tfmdb/pbmc10k.all.scores.csv',
'analysis/prior/tfbind/chipatlas/pbmc10k.all.scores.csv',
'analysis/prior/tfbind/remap2022/pbmc10k.all.scores.csv',
'analysis/prior/tfbind/unibind/pbmc10k.all.scores.csv',
'analysis/prior/cre/encode/pbmc10k.all.scores.csv',
'analysis/prior/cre/gwascatalogue/pbmc10k.all.scores.csv',
'analysis/prior/cre/phastcons/pbmc10k.all.scores.csv',
'analysis/prior/cre/zhang21/pbmc10k.all.scores.csv',
'analysis/prior/cre/zhang21/pbmc10k.all.scores.csv',
'analysis/prior/eqtl/eqtlcatalogue/pbmc10k.all.scores.csv',
]

# Update config with grid search
n_cells = [1024, 2048, 4096, 8192, 16384]
n_genes = [1024, 2048, 4096, 8192, 16384]
seeds = [0, 1, 2]
stab_runs = []
for n_cell in n_cells:
    for n_gene in n_genes:
        for seed in seeds:
            n_cre = n_gene * 4
            name = 'pbmc10k_{n_cell}_{n_gene}_{seed}'.format(n_cell=n_cell, n_gene=n_gene, seed=seed)
            config['datasets']['pbmc10k']['cases'][name] = dict()
            config['datasets']['pbmc10k']['cases'][name]['celltypes'] = 'all'
            config['datasets']['pbmc10k']['cases'][name]['n_sample'] = n_cell
            config['datasets']['pbmc10k']['cases'][name]['seed'] = seed
            config['datasets']['pbmc10k']['cases'][name]['n_hvg'] = n_gene
            config['datasets']['pbmc10k']['cases'][name]['n_hvr'] = n_cre
            for mth in mthds:
                stab_runs.append('datasets/pbmc10k/cases/{name}/runs/{mth}.src.csv'.format(name=name, mth=mth))

rule all:
    input:
        f_scores

# snakemake --profile config/slurm/ ...
